upstream puma_<%= fetch(:nginx_config_name) %> { <%
  @backends = [fetch(:puma_bind)].flatten.map do |m|
  etype, address  = /(tcp|unix|ssl):\/{1,2}(.+)/.match(m).captures
  if etype == 'unix'
    "server #{etype}:#{address} #{fetch(:nginx_socket_flags)};"
  else
    "server #{address.gsub(/0\.0\.0\.0(.+)/, "127.0.0.1\\1")} #{fetch(:nginx_http_flags)};"
  end
end
%><% @backends.each do |server| %>
  <%= server %><% end %>
}

<%# To avoid using the insecure SSLv3 protocol %>
ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

<% certificate_content = %Q(
ssl_certificate #{fetch(:nginx_ssl_certificate_path)};
ssl_certificate_key #{fetch(:nginx_ssl_certificate_key_path)};
) %>

<% fetch(:nginx_server_name_alias).each do |name| %>
server {
  listen 80;
  server_name <%= name %>;
  return 301 $scheme://<%= fetch :nginx_server_name %>$request_uri;
}

<% if fetch(:nginx_use_ssl) %>
server {
  listen 443 ssl;
  server_name <%= name %>;
  <%= certificate_content %>
  return 301 $scheme://<%= fetch :nginx_server_name %>$request_uri;
}
<% end %>
<% end %>

<% if fetch(:nginx_use_ssl) %>
server {
  listen 80;
  server_name <%= fetch(:nginx_server_name) %>;
  rewrite ^(.*) https://$host$1 permanent;
}
<% end %>

server {
<% if fetch(:nginx_use_ssl) %>
  listen 443 ssl;
  ssl on;
  <%= certificate_content %>
<% else %>
  listen 80;
<% end %>
  server_name <%= fetch(:nginx_server_name) %>;
  root <%= current_path %>/public;
  try_files $uri/index.html $uri @puma_<%= fetch(:nginx_config_name) %>;

  client_max_body_size 4G;
  keepalive_timeout 10;

  error_page 500 502 504 /500.html;
  error_page 503 @503;
  server_tokens off;

  location @puma_<%= fetch(:nginx_config_name) %> {
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_redirect off;
<% if fetch(:nginx_use_ssl) %>
    proxy_set_header X-Forwarded-Proto https;
<% end %>
    proxy_pass http://puma_<%= fetch(:nginx_config_name) %>;
    # limit_req zone=one;
    access_log <%= shared_path %>/log/nginx.access.log;
    error_log <%= shared_path %>/log/nginx.error.log;
  }

  # Common bandwidth hoggers and hacking tools.
  if ($http_user_agent ~ "libwww-perl") {
      set $block_user_agents 1;
  }
  if ($http_user_agent ~ "GetRight") {
      set $block_user_agents 1;
  }
  if ($http_user_agent ~ "GetWeb!") {
      set $block_user_agents 1;
  }
  if ($http_user_agent ~ "Go!Zilla") {
      set $block_user_agents 1;
  }
  if ($http_user_agent ~ "Download Demon") {
      set $block_user_agents 1;
  }
  if ($http_user_agent ~ "Go-Ahead-Got-It") {
      set $block_user_agents 1;
  }
  if ($http_user_agent ~ "TurnitinBot") {
      set $block_user_agents 1;
  }
  if ($http_user_agent ~ "GrabNet") {
      set $block_user_agents 1;
  }

  if ($block_user_agents = 1) {
      return 403;
  }

  location ^~ /(js)|(css)|(images)/ {
    gzip_static on;
    expires max;
    add_header Cache-Control public;
  }

  location = /50x.html {
    root html;
  }

  location = /404.html {
    root html;
  }

  if ($request_method !~ ^(GET|HEAD|PUT|PATCH|POST|DELETE|OPTIONS)$ ){
    return 405;
  }
}
